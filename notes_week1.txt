Print

printf(“Hello, world\n”);


Variables

int counter = 0;


Incrementing

counter = counter + 1;
counter += 1;
counter ++;


Conditionals

if (x <  y)
{
	printf(“x is less than y\n”);
}


if (x <  y)
{
	printf(“x is less than y\n”);
}
else
{
	printf(“x is not less than y\n”);
}


if (x < y)
{
	printf(“x is less than y\n”);
}
else if (x > y)
{
	printf(“x is not less than y\n”);
}
else if (x == y)
{
	printf(“x is equal to y\n”);
}


if (x < y)
{
	printf(“x is less than y\n”);
}
else if (x > y)
{
	printf(“x is not less than y\n”);
}
else
{
	printf(“x is equal to y\n”);
}


While Loops

while (true)
{
	printf(“hello, world\n”);
}


For loops

for (int i = 0; i < 50; i++)	#  i++ is the same thing as the i = i + 1 or i += 1 as per the incrementing article
{
	printf(“hello, world\n”);
}


User input

string answer = get_string(“What’s your name?\n”);
printf(“%s”, answer);
printf(“hello, %s”, answer);


hello.c

#include <stdio.h>

int main(void)
{
	printf(“hello, world\n”);
}


Compilation

CS50 sandbox


Command-line arguments

clang -o hello hello.c
./hello


Make

make hello


#include <stdio.h>

int main(void)
{
	printf(“hello, name\n”);
}


make name

#include <cs50.h>
#include <stdio.h>

int main(void)
{
	name = get_string(“What is your name?\n”);
	printf(“hello, %s\n”, name);
}


get_string and printf

// They are stored in the libraries like cs50.h and so, which someone created before


int.c

#include <stdio.h>
#include <cs50.h>

int main(void)					// This is a equivalent of the Scratch’s green flag to start the program
{
	int I = get_int(“Integer: “);
	printf(“hello, %i\n”, i);
}


float.c

#include <stdio.h>
#include <cs50.h>

int main(void)
{
	float f = get_float(“Float: “);
	printf(“hello, %f\n”, f);
}


ints.c

#include <stdio.h>
#include <cs50.h>

int main(void)
{
	// Prompt user for x
	int x = get_int(“x: “);

	// Prompt user for y
	int y = get_int(“y: “);

	// Perform arithmetic
	printf(“x + y = %i\n”, x + y);
	printf(“x + y = %i\n”, x - i);
	printf(“x * y = %i\n”, x * y);
	printf(“x / y = %i\n”, x / y);
	printf(“x mod y = %i\n”, x % y);
}


floats.c

// Floating-point arithmetic with float

#include <stdio.h>
#include <cs50.h>

int main(void)
{
	// Prompt user for x
	float x = get_float("x: ");

	// Prompt user for y
	float y = get_float("y: ");

	// Perform division
	printf("x / z = %.7f\n", x / y);
}

(notes:
- %.7f - shows 7 decimal places instead of the default 6, %.50f shows 50 places and so
- floats - decimal places have finite number, because there is finite memory (RAM) in computer. To double the amount, use double instead, but it will use more bits so more space, which is not always effective and it is expensive
)

// Floating/point arithmetic with double

#include <stdio.h>
#include <cs50.h>

int main(void)
{
	// Prompt user for x
	double x = get_double("x: ");

	// Prompt user for y
	double y = get_double("y: ");

	// Perform division
	printf("x / z = %.7f\n", x / y);
}


parity.c

#include <stdio.h>
#include <cs50.h>

int main(void)
{
	// Prompt user for integer
	int n = get_int("n: ");

	// Check parity of integer
	if (n % 2 == 0)
	{
		printf("even\n");
	}
	else
	{
		printf("odd\n");
	}
}


conditions.c

#include <stdio.h>
#include <cs50.h>

int main(void)
{
	// Prompt user for x
	int x = get_int("x: ");

	// Prompt user for y
	int y = get_int("y: ");

	// Compare x and y
	if (x < y)
	{
		printf("x is less than y\n");
	}
	else if (x > y)
	{
		printf("x is greater than y\n");
	}
	else
	{
		printf("x is equal to y\n");
	}
}


answer.c

// Logical operators

#include <stdio.h>
#include <cs50.h>

int main(void)
{
	// Prompt user for answer
	char c = get_char("Answer: ");

	// Check answer
	if (c == 'Y' || c == 'y')
	{
		printf("yes\n");
	}
	else if (c == 'N' || c == 'n')
	{
		printf("no\n");
	}
}


cough0.c

#include <stdio.h>

int main(void)
{
	printf("cough\n");
	printf("cough\n");
	printf("cough\n");
}


cough1.c

#include <stdio.h>

int main(void)
{
	for (int i = 0; i < 3; i++)
	{
		printf("cough\n");
	}
}


cough2.c

#include <stdio.h>

void cough(void);

int main(void)
{
	for (int i = 0; i < 3; i++)
	{
		cough();
	}
}

void cough(void)
{
	printf("cough\n");
}


cough3.c

#include <stdio.h>

void cough(int n);

int main(void)
{
	cough(3);
}

void cough(int n)
{
	for (int i = 0; i < n; i++)
	{
		printf("cough\n");
	}
}


positive.c

#include <stdio.h>
#include <cs50.h>

int get_positive_int(string prompt);

int main(void)
{
	int i = get_positive_int("Positive integer: ");
	printf("%i\n", i);
}

int get_positive_int(string prompt)
{
	int n;
	do
    {
		n = get_int("%s", prompt);
	}
	while (n < 1);
	return n;
}

(notes:
- ,,do while" loop instead of while loop or for loop will do the action first, so at least once before checking the condition
- return - at the end of mz function, if I want to return something, I have to tzpe return and then what I want to return
- in c, the variables exist only in the scope, which literally means, they only exist between the curly braces and they are not known outside (so they are local, not global)
)


Integer Overflow

(notes:
- finite amount of memory means finite amount of numbers (integers)
)


overflow.c

#include <stdio.h>
#include <unistd.h>

int main(void)
{
	// Iteratively double i
	for (int i = 1; ; i *= 2)
	{
		printf("%i\n", i);
		sleep(1);
	}
}

(notes:
- the issue of overflowing the software with big enough number due to the deficit of bits (memory) can couse big problems
)


Integer Underflow

(notes:
- the opposite of overflow is underflow, so if there is for example 1 byte, which is 8 bits - 00000001 and you will subtract 2, you will not get 00000000, but 11111111
)


Shorts


Data types and Variables

Integer:
int
- always take up 4 bytes of memory (32 bits)
- it is split half by half between negative and positive values (around -2B to +2B)
- unsigned int - unsigned qualifier doubles the positive range, but can't use negative, so full 32 bits to positive value, which is around +4B

Character:
char
- store single character
- always take up 1 byte of memory (8 bits)
- thanks to ASCII, you can write any character and single number

Floating point number
float
- floating-point values or also known as real numbers
- always take up 4 bytes of memory (32 bits)
- not that precise because of the memory

Double
double
- doubles the memory of floating point number to 8 bytes (64 bits)
- allows to specify much more precise numbers than float

Void
void
- it is a type, not a data type
- it returns no value or taking no parameters, so it is a placeholder for ,,nothing"


#include <cs50.h> (below data types 

Boolean
bool
- for storing True or False
- not default in C language

String
string
- for variables that will store a series of characters like words, sentences and so
- not default in C


- If I need to create multiple variables of the same type at once, I can do it on one line by specifying the data type and writing the names one after each other and separate by comma - int height, width;
- Good common practice is to declare variables only when I need them, not all at once and at the beginning of the code
- Don't re-declare variables, it is enough to specify the data type just once when declaring them
- I can declare a variable and give it a value at the same line - int number = 17; // That is called initialization


Operators

Arithmetic operators
- In C, we can add (+), subtract (-), multiply (*) and divide (/) numbers
- We also have modulus (%), which gives us a remainder after the division
- I can short for example x = x * 5; to just x *= 5;. I can do same with + (x += 5;), - (x -= 5;) etc.
- I can increment or decrement a variable by 1 wit these: x++; and x--;

Boolean expressions
- used for comparing values
- it can evaluate to one of two possible values: true or false
- we can use it for deciding the paths and so
- in C, every nonzero value is equivalent to true, and yero is false
- two main types of Boolean expressions: logical operators and relational operators

Logical operators
- Logical AND (&&) is true if and only if both operands are true, otherwise false
	x	y	(x && y)
	true	true	true
	true	false	false
	false	true	false
	false 	false	false
- Logical OR (||) is true if and only if at least one operand is true, otherwise false
	x	y	(x || y)
	true	true	true
	true	false	true
	false	true	true
	false	false	false
- Logical NOT (!) inverts the value of its operand
	x	!x
	true	false
	false 	true

Relational operators
- Less than (x < y)
- Less than or equal to (x <= y)
- Greater than (x > y)
- Greater than or equal to (x >= y)
- Equality (x == y)	// Be careful, because it is common mistake to use = (assign operator) instead of == (equality operator)
- Inequality (x != y)


Conditional statements

If
if (boolean-expression)
{

}
- if the boolean-expression evaluetes to true, all lines of code between the curly braces will execute in order from top to bottom
- if the boolean-expression evaluates to false, those lines of code will not be executed and skipped

If, else
if (boolean-expression)
{

}
else
{

}
- if the boolean-expression evaluetes to true, all lines of code between the curly braces will execute in order from top to bottom
- if the boolean-expression evaluetes to true, all lines of code between the second set of curly braces will execute in order from top to bottom

If, else if, else
if (boolean-expr1)
{
	// first branch
}
else if (boolean-expr2)
{
	// second branch
}
else if (boolean-expr3)
{
	// third branch
}
else
{
	// fourth branch
}
- in C, it is possible to crate an if-else if-else chain to evaluate more than one expression
- each branch is mutually exclusive, so it will execute just lines of code, inside the curly braces which expression was evaluated to true first
- it is also possible to create a chain of non-mutually exclusive branches:
if (boolean-expr1)
{
	// first branch
}
if (boolean-expr2)
{
	// second branch
}
if (boolean-expr3)
{
	// third branch
}
else
{
	// fourth branch
}
- in this example, only the third and fourth branches are mutually exclusive, because the else binds to the nearest if only

Switch
switch()
int x = get_int("Number: \n");
switch(x)
{
	case 1:
		printf("One\n");
		break;
	case 2:
		printf("Two\n");
		break;
	case 3:
		printf("Three\n");
		break;
	default:
		printf("Sorry\n");
}
- C's swtich() statement is a conditional statement that permits enumeration of discrete cases, instead of relying on Boolean expressions
- It's important to break; between each case, or you will "fall through" each case (unless that is desired behavior). break; will end the current block of code
int x = get_int("Number: \n");
switch(x)
{
	case 5:
		printf("Five, \n");
	case 4:
		printf("Four, \n");
	case 3:
		printf("Three, \n");
	case 2:
		printf("Two, \n");
	case 1:
		printf("One, \n");
	default:
		printf("Blast-off!\n");
}

Ternary operator
?:
int x;
if (expr)
{
	x = 5;
}
else
{
	x = 6;
}
I can achieve the same output by writing it like below:
int x = (expr) ? 5 : 6;	// If the expression is true, assign value after the question mark, if it is false, assign value after the colon
- you don't have to use it if you don't want to, it is just an option and it is good to know that

Summary
if (and if-else, and if-else if-...-else)
	- Use Boolean expressions to make decisions
switch
	- Use discrete cases to make decisions
?:
	- Use to replace a very simple if-else branches (chains) to make your code look fancy


Loops

- allows program to execute lines of code repeatedly, saving from needing to copy and paste or otherwise repeat lines of code

Infinite loop
while (true)
{

}
- The lines of code between the curly braces will execut repeatedly from top to bottom, until and unless we break out of it (as with a break; statement) or otherwise kill the program

While loop
while (boolean-expr)
{

}
- if the boolean-expr evaluates to true, all lines of code between the curly braces will execute repeatedly, in order from top to bottom, until boolean-expr evaluates to false

Do while loop
do
{

}
while (boolean-expr);
- this loop will execute all lines of code between the curly braces once, and then, if the boolean-expr evaluates to true, will go back and repeat that process until boolean-expr evaluates to false
- it means the code will be executed at least once

For loop
for (int i = 0; i < 10; i++)
{

}
- it will repeat the code between the curly braces a specified number of times, in this example 10
- the process:
	- the counter variable(s) (here, i) is set
	- the Boolean expression is checked
		- if it evaluates to true, the body of the loop executes
		- if it evaluates to false, the body of the loop does not execute
	- the counter variable is incremented, and then the Boolean expression is checked again, etc.

Summary
while
	- Use when you want a loop to repeat an unknown number of times, and possibly not at all
do-while
	- Use when you want a loop to repeat an unknown number of times, but at least once
for
	- Use when you want a loop to repeat a discrete number of times, though you may not know the number at the moment the program is compiled


Command line

Commands for UNIX based OS (Linux, MacOS)

ctrl + c
	- break the current running program
ctrl + l
	- clears the text in terminal
ls
	- short for "list", this command will geive a readout of all the files and folders in the current directory
cd <directory>
	- short for "change directory", this command change the current directory to <directory>, which I specify, in my workspace or on my operating system
	- the shorthand name for the current directory is .
	- the shorthand name for the parent directory of the current directory is ..
	- pwd (present working directory) - name of the current directory
	- if I type just cd I will get to home directory
mkdir <directory>
	- short for "make directory", this command will create a new subdirectory called <directory> located in the current directory
cp <source> <destination>
	- short for "copy", this command will allow to create a duplicate of the file I specify as <source>, which it will save in <destination>
	- if I wish to copy entire directories, I need to modify the command slightly:
	  cp -r <source directory> <destination directory>
	  the "-r" stands for recursive, and tells cp to dive down into the directory and copy everything inside of it (including any subdirectories it might contain)
rm <file>
	- short for "remove", this command will delete <file> after it asks you to confirm (y/n) you want to delete it
	- I can skip the confirmation by typing:
	  rm -f <file>	// (f as force) Be aware! There is no undo!
	- to delete entire directories, I need to use the -r flag, just as was the case with cp
	  rm -r <directory>
	- I can also combine the -r and -f flags into -rf
mv <source> <destination>
	- short for "move", this command will allow you to effectively rename a file, moving it from <source> to <destination>