Process of compiling

1st - Preprocessing
 - checks for #include stuff and inputs the functions in them which I am using in my code (stdio.h, cs50.h, etc.)

2nd - Compiling
 - changes the code to instructions for the CPU (assembly)

3nd - Assembling
 - change the instructions to binary

4th - Linking
 - change the libraries to binary and link all the binary code to one file


buggy0.c

int main(void)
{
	printf("hello, world\n")
}


buggy2.c

#include <stdio.h>

int main(void)
{
	for (int i = 0; i <= 10; i++)
	}
		printf("i is %i\n", i);
		printf("#\n");
	}
}


Debugging Tools

help50 - to help with error messages and wrong code
printf - to see what is actuatlly happening at the particular place
style50 - to see if it is nice looking code


RAM

 - Random Access Memory


Arrays

 - stored back to back to back in memory


scores0.c

#include <stdio.h>
#include <cs50.h>

void chart(int score);

int main(void)
{
	int score1 = get_int("Score 1: ");
	int score2 = get_int("Score 2: ");
	int score3 = get_int("Score 3: ");

	printf("Score 1: ");
	chart(score1);

	printf("Score 2: ");
	chart(score2);

	printf("Score 3: ");
	chart(score3);
}

void chart(int score)
{
	for (int i = 0; i < score; i++)
	{
		printf("#");
	}
	printf("\n");
}


scores2.c

// Generates a bar chart of three scores using an array

#include <stdio.h>
#include <cs50.h>

const int COUNT = 3;

void chart(int score);

int main(void)
{
	// Get scores from user
	int scores[COUNT];
	for (int i = 0; i < COUNT; i++)
	{
		scores[i] = get_int("Score %i: ", i + 1);
	}

	// Chart scores
	for (int i = 0; i < COUNT; i++)
	{
		printf("Score %i: ", i + 1);
		chart(scores[i]);
	}
}

void chart(int score)
{
	for (int i = 0; i < score; i++)
	{
		printf("#");
	}
	printf("\n");
}

(notes:
 - if the variable is named with capital letters, that means it is declared at the beginning of the code and it is global, accessible everywhere (outside the curly braces)
)


scores4.c

// Generates a bar chart of three scores by passing an array, using a constant

#include <stdio.h>
#include <cs50.h>
#include <math.h>

const int COUNT = 3;

void chart(int count, int scores[]);

int main(void)
{
	// Get scores from user
	int scores[COUNT];
	for (int i = 0; i < COUNT; i++)
	{
		scores[i] = get_int("Score %i: ", i + 1);
	}

	// Chart scores
	chart(COUNT, scores);
}

// Generate bars

void chart(int count, int scores[])
{
	// Output one hash per point
	for (int i = 0; i < count; i++)
	{
		for(int j = 0; j < scores[i]; j++)
		{
			printf("#");
		}
		printf("\n");
	}
}


string0.c

// Prints string char by char

#include <stdio.h>
#include <cs50.h>
#include <string.h>

int main(void)
{
	string s = get_string("Input :");
	printf("Output:\n");
	for (int i = 0, n = strlen(s); i < n; i++)
	{
		printf("%c\n", s[i]);
	}
}

(notes:
 - including the string.h library will unlock string related functions, for example strlen, which will return the length of the string
)


Null Terminator

 - for the computer to know where in the memory it stored the variable, string, etc. it is putting identifier in the first byte that it starts here and at the end of the variable it puts one byte of zeros (00000000 or \0) known as null terminator


strlen.c

#include <stdio.h>
#include <cs50.h>
#include <string.h>

int main(void)
{
	string s = get_string("Name: ");

	int n = 0;
	while (s[n] != '\0')
	{
		n++;
	}

	printf("The length of your name is %i\n", n);
}


ascii0.c

// Explicitly casts chars to ints

#include <stdio.h>
#include <cs50.h>
#include <string.h>

int main(void)
{
	string s = get_string("String: ");
	for (int = 0; i < strlen(s); i++)
	{
		int c = (int) s[i];	// I even don't have to specify (int), I can just write int c = s[i]
		printf("%c %i\n", s[i], c); // I can even exclude the whole line above and just type printf("%c %i\n", s[i], s[i]);
	}
}

(notes:
 - the default code is called explicit casting and if I will use the methods in the comments, that is called implicit casting
)

capitalize0.c

// Capitalizes a string

#include <stdio.h>
#include <cs50.h>
#include <string.h>

int main(void)
{
	string s = get_string("Before: ");
	printf("After: ");
	for (int i = 0, n = strlen(s); i < n; i++)
	{
		if (s[i] >= 'a' && s[i] <= 'z')
		{
			printf("%c", s[i] - ('a' - 'A'));	// Subtracts the ASCII value of the lower letter from capital letter, which is 32 for all letters, and then subtracts the value (32) from my letter
		}
		else
		{
			printf("%c", s[i]);
		}
	}
	printf("\n");
}


capitalize1.c

// Capitalizes string using ctype library (and an unnecessary condition)

#include <stdio.h>
#include <cs50.h>
#include <string.h>
#include <ctype.h>

int main(void)
{
	string s = get_string("Before: ");
	printf("After: ");
	for (int i = 0, n = strlen(s); i < n; i++)
	{
		printf("%c", toupper(s[i]));
	}
	printf("\n");
}


argv0.c

#include <stdio.h>
#include <cs50.h>

int main(int argc, string argv[])
{
	if (argc == 2)
	{
		printf("hello, %s\n", argv[1]);
	}
	else
	{
		printf("hello, world\n");
	}
}


argv1.c

#include <stdio.h>
#include <cs50.h>
#include <string.h>

int main(int argc, string argv[])
{
	// Iterate over strings in argv
	for (int i = 0; i < argc; i++)
	{
		// Iterate over chars in argv[i]
		for (int j = 0, n = strlen(argv[i]); j < n; j++)
		{
			printf("%c\n", argv[i][j]);
		}
	}
}


Ciphering